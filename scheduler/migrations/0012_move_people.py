# Generated by Django 3.2.18 on 2023-05-12 14:01

from django.db import migrations


def create_people(entity, users, People, class_id=None):
    people = None
    created = False
    this_class_id = class_id or entity.pk
    if People.objects.filter(class_name=entity.__class__.__name__,
                             class_id=this_class_id).exists():
        people = People.objects.get(class_name=entity.__class__.__name__,
                                    class_id=this_class_id)
    else:
        created = True
        people = People(class_name=entity.__class__.__name__,
                        class_id=this_class_id)
        people.save()
        for user in users:
            people.users.add(user)
    return people, created


def migrate_people(apps, schema_editor):
    ResourceAllocation = apps.get_model("scheduler", "ResourceAllocation")
    PeopleAllocation = apps.get_model("scheduler", "PeopleAllocation")
    Location = apps.get_model("scheduler", "Location")
    Label = apps.get_model("scheduler", "Label")
    Ordering = apps.get_model("scheduler", "Ordering")
    Worker = apps.get_model("scheduler", "Worker")
    People = apps.get_model("scheduler", "People")
    Profile = apps.get_model("gbe", "Profile")
    Persona = apps.get_model("gbe", "Persona")
    Troupe = apps.get_model("gbe", "Troupe")
    Bio = apps.get_model("gbe", "Bio")

    counts = {
        'Locations': 0,
        'Workers': 0,
        ' - Profiles': 0,
        ' - Copy Profiles': 0,
        ' - Personas': 0,
        ' - Copy Personas': 0,
        ' - Troupes': 0,
        ' - Copy Troupes': 0,
        ' - Unknown Workers': 0,
        'Unknown': 0,
    }
    for alloc in ResourceAllocation.objects.all():
        if Location.objects.filter(id=alloc.resource.id).exists():
            counts['Locations'] = counts['Locations'] + 1
        elif Worker.objects.filter(id=alloc.resource.id).exists():
            counts['Workers'] = counts['Workers'] + 1
            worker = Worker.objects.get(id=alloc.resource.id)
            people = None
            label_text = ""
            if Label.objects.filter(allocation=alloc).exists():
                label_text = Label.objects.get(allocation=alloc).text
            if Profile.objects.filter(pk=worker._item.pk).exists():
                entity = Profile.objects.get(pk=worker._item.pk)
                people, created = create_people(entity,
                                                [entity.user_object],
                                                People,
                                                entity.user_object.account.pk)
                if created:
                    counts[' - Profiles'] = counts[' - Profiles'] + 1
                else:
                    counts[' - Copy Profiles'] = counts[' - Copy Profiles'] + 1
            elif Persona.objects.filter(pk=worker._item.pk).exists():
                entity = Persona.objects.get(pk=worker._item.pk)
                bio = Bio.objects.get(name=entity.name, label=entity.label)
                people, created  = create_people(
                    bio,
                    [entity.performer_profile.user_object],
                    People)
                if created:
                    counts[' - Personas'] = counts[' - Personas'] + 1
                else:
                    counts[' - Copy Personas'] = counts[' - Copy Personas'] + 1
            elif Troupe.objects.filter(pk=worker._item.pk).exists():
                entity = Troupe.objects.get(pk=worker._item.pk)
                bio = Bio.objects.get(name=entity.name, label=entity.label)
                users = []
                for a in entity.membership.all():
                    users += [a.performer_profile.user_object]
                people, created = create_people(bio, users, People)
                if created:
                    counts[' - Troupes'] = counts[' - Troupes'] + 1
                else:
                    counts[' - Copy Troupes'] = counts[' - Copy Troupes'] + 1
            else:
                counts[' - Unknown Workers'] = counts[' - Unknown Workers'] + 1

            p_alloc = PeopleAllocation(event=alloc.event,
                                       people=people,
                                       label=label_text,
                                       role=worker.role.capitalize())
            p_alloc.save()
            if Ordering.objects.filter(allocation=alloc).exists():
                ordering = Ordering.objects.get(allocation=alloc)
                ordering.people_allocated = p_alloc
                ordering.save()
        else:
            counts['Unknown'] = counts['Unknown'] + 1

    print('')
    for key, value in counts.items():
        print("%s: %d" % (key, value))


def migrate_people_reverse(apps, schema_editor):
    People = apps.get_model("scheduler", "People")
    print("deleting %s People objects" % People.objects.all().count())
    People.objects.all().delete()
    return


def profile_to_user(Profile, answer):
    if Profile.objects.filter(pk=answer.profile.pk).exists():
        answer.user = Profile.objects.get(pk=answer.profile.pk).user_object
        answer.save()
    else:
        print("can't find profile: %d" % answer.profile.pk)

def migrate_eval_answers(apps, schema_editor):
    EventEvalBoolean = apps.get_model("scheduler", "EventEvalBoolean")
    EventEvalComment = apps.get_model("scheduler", "EventEvalComment")
    EventEvalGrade = apps.get_model("scheduler", "EventEvalGrade")
    Profile = apps.get_model("gbe", "Profile")
    for answer in EventEvalBoolean.objects.all():
        profile_to_user(Profile, answer)
    for answer in EventEvalComment.objects.all():
        profile_to_user(Profile, answer)
    for answer in EventEvalGrade.objects.all():
        profile_to_user(Profile, answer)


def return_to_profile(apps, schema_editor):
    EventEvalBoolean = apps.get_model("scheduler", "EventEvalBoolean")
    EventEvalComment = apps.get_model("scheduler", "EventEvalComment")
    EventEvalGrade = apps.get_model("scheduler", "EventEvalGrade")
    for answer in EventEvalBoolean.objects.all():
        answer.profile = answer.user.profile
        answer.save()
    for answer in EventEvalComment.objects.all():
        answer.profile = answer.user.profile
        answer.save()
    for answer in EventEvalGrade.objects.all():
        answer.profile = answer.user.profile
        answer.save()
    return


class Migration(migrations.Migration):

    dependencies = [
        ('scheduler', '0011_new_bios'),
        ('gbe', '0034_move_bios'),
    ]

    operations = [
        migrations.RunPython(migrate_people,
                             reverse_code=migrate_people_reverse),
        migrations.RunPython(migrate_eval_answers,
                             reverse_code=return_to_profile),
    ]
