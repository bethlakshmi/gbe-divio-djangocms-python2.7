# Generated by Django 3.2.18 on 2023-05-12 14:01

from django.db import migrations


def create_people(alloc, worker, entity, users, label_text, People):
    people = People(role=worker.role,
                    label=label_text,
                    class_name=entity.__class__.__name__,
                    class_id=entity.pk)
    people.save()
    for user in users:
        people.users.add(user)
    alloc.event.people.add(people)
    return people


def migrate_people(apps, schema_editor):
    ResourceAllocation = apps.get_model("scheduler", "ResourceAllocation")
    Location = apps.get_model("scheduler", "Location")
    Label = apps.get_model("scheduler", "Label")
    Ordering = apps.get_model("scheduler", "Ordering")
    Worker = apps.get_model("scheduler", "Worker")
    People = apps.get_model("scheduler", "People")
    Profile = apps.get_model("gbe", "Profile")
    Persona = apps.get_model("gbe", "Persona")
    Troupe = apps.get_model("gbe", "Troupe")
    Bio = apps.get_model("gbe", "Bio")

    counts = {
        'Locations': 0,
        'Workers': 0,
        ' - Profiles': 0,
        ' - Personas': 0,
        ' - Troupes': 0,
        ' - Unknown Workers': 0,
        'Unknown': 0,
    }
    for alloc in ResourceAllocation.objects.all():
        if Location.objects.filter(id=alloc.resource.id).exists():
            counts['Locations'] = counts['Locations'] + 1
        elif Worker.objects.filter(id=alloc.resource.id).exists():
            counts['Workers'] = counts['Workers'] + 1
            worker = Worker.objects.get(id=alloc.resource.id)
            people = None
            label_text = ""
            if Label.objects.filter(allocation=alloc).exists():
                label_text = Label.objects.get(allocation=alloc).text
            if Profile.objects.filter(pk=worker._item.pk).exists():
                counts[' - Profiles'] = counts[' - Profiles'] + 1
                entity = Profile.objects.get(pk=worker._item.pk)
                people = create_people(alloc,
                                       worker,
                                       entity,
                                       [entity.user_object],
                                       label_text,
                                       People)
            elif Persona.objects.filter(pk=worker._item.pk).exists():
                counts[' - Personas'] = counts[' - Personas'] + 1
                entity = Persona.objects.get(pk=worker._item.pk)
                bio = Bio.objects.get(name=entity.name, label=entity.label)
                people = create_people(alloc,
                                       worker,
                                       bio,
                                       [entity.performer_profile.user_object],
                                       label_text,
                                       People)
            elif Troupe.objects.filter(pk=worker._item.pk).exists():
                counts[' - Troupes'] = counts[' - Troupes'] + 1
                entity = Troupe.objects.get(pk=worker._item.pk)
                bio = Bio.objects.get(name=entity.name, label=entity.label)
                users = []
                for a in entity.membership.all():
                    users += [a.performer_profile.user_object]
                people = create_people(alloc,
                                       worker,
                                       bio,
                                       users,
                                       label_text,
                                       People)
            else:
                counts[' - Unknown Workers'] = counts[' - Unknown Workers'] + 1
            if Ordering.objects.filter(allocation=alloc).exists:
                ordering = Ordering.objects.get(allocation=alloc)
                ordering.people = people
                ordering.save()
        else:
            counts['Unknown'] = counts['Unknown'] + 1

    print('')
    for key, value in counts.items():
        print("%s: %d" % (key, value))

def migrate_people_reverse(apps, schema_editor):
    People = apps.get_model("scheduler", "People")
    print("deleting %s People objects" % People.objects.all().count())
    People.objects.all().delete()
    return


class Migration(migrations.Migration):

    dependencies = [
        ('scheduler', '0011_new_bios'),
        ('gbe', '0034_move_bios'),
    ]

    operations = [
        migrations.RunPython(migrate_people,
                             reverse_code=migrate_people_reverse)
    ]
