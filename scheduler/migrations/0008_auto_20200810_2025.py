# Generated by Django 3.0.8 on 2020-08-10 20:25

from django.db import migrations


def refactor_act_resource(apps, schema_editor):
    ActResource = apps.get_model('scheduler', 'ActResource')
    Worker = apps.get_model('scheduler', 'Worker')
    Ordering = apps.get_model('scheduler', 'Ordering')
    ResourceAllocation = apps.get_model('scheduler', 'ResourceAllocation')

    resources = ActResource.objects.all()
    print("Changing %d resources" % resources.count())
    num_order_updated = 0
    num_order_create = 0
    num_no_bookings = 0
    for resource in resources:
        for booking in resource.allocations.all():
            performer = Worker(
                _item=resource._item.act.performer,
                role="Performer")
            performer.save()
            booking.resource = performer
            booking.save()
            try:
                ordering = booking.ordering
                ordering.role = resource.role
                ordering.class_name = "Act"
                ordering.class_id = resource._item.act.pk
                num_order_updated = num_order_updated + 1
            except:
                ordering = Ordering(allocation=booking,
                                    role=resource.role,
                                    class_name="Act",
                                    class_id=resource._item.act.pk)
                num_order_create = num_order_create + 1
            ordering.save()
    print("number of orderings updated: %s" % num_order_updated)
    print("number of orderings create: %s" % num_order_create)
    print("number of bookings remaining: %s" % (
        ResourceAllocation.objects.filter(resource__in=resources).count()))


class Migration(migrations.Migration):

    dependencies = [
        ('scheduler', '0007_auto_20200810_2024'),
    ]

    operations = [
        migrations.RunPython(refactor_act_resource),
    ]
